/*
  +----------------------------------------------------------------------+
  | PHP Version 7                                                        |
  +----------------------------------------------------------------------+
  | Copyright (c) 1997-2015 The PHP Group                                |
  +----------------------------------------------------------------------+
  | This source file is subject to version 3.01 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available through the world-wide-web at the following url:           |
  | http://www.php.net/license/3_01.txt                                  |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
  | Author:                                                              |
  +----------------------------------------------------------------------+
*/

/* $Id$ */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "php.h"
#include "php_ini.h"
#include "php_scandir.h"
#include "ext/standard/info.h"
#include "php_exdef.h"


ZEND_DECLARE_MODULE_GLOBALS(exdef)

/* True global resources - no need for thread safety here */
static int le_exdef;



/* {{{ stupid stringifcation */
#if DEFAULT_SLASH == '/'
	#define DEFAULT_SLASH_STRING "/"
#elif DEFAULT_SLASH == '\\'
	#define DEFAULT_SLASH_STRING "\\"
#else
#error "Unknown value for DEFAULT_SLASH"
#endif
/* }}} */


/* {{{ struct exdef_parser_ctxt */
typedef struct _exdef_parser_ctxt
{
	int module_number;
	const char * filename;
	int type;
	int flags;
} exdef_parser_ctxt;
/* }}} */

typedef int (*exdef_walk_dir_cb)(const char* filename, void* ctxt TSRMLS_DC);

static const char default_directory[]	= PHP_CONFIG_FILE_SCAN_DIR DEFAULT_SLASH_STRING "exdef" DEFAULT_SLASH_STRING "constant.exdef.ini";
static HashTable *exdef_constants_table = NULL;

/* {{{ PHP_FUNCTION declarations */
PHP_FUNCTION(exdef_get_defined);
/* }}} */


/* {{{ PHP_INI
 */

PHP_INI_BEGIN()
    STD_PHP_INI_ENTRY("exdef.directory",      "", PHP_INI_SYSTEM, OnUpdateLong, directory, zend_exdef_globals, exdef_globals)
	STD_PHP_INI_ENTRY("exdef.suffix",      ".exdef.ini", PHP_INI_SYSTEM, OnUpdateLong, suffix, zend_exdef_globals, exdef_globals)
PHP_INI_END()

/* }}} */

/* Remove the following function when you have successfully modified config.m4
   so that your module can be compiled into PHP, it exists only for testing
   purposes. */

/* Every user-visible function in PHP should document itself in the source */
/* {{{ proto array exdef_get_defined()
   Return a string to confirm that the module is compiled in */
PHP_FUNCTION(exdef_get_defined)
{
	ulong num_key;
	zend_string *key;
	zval *val;

	array_init(return_value);


	ZEND_HASH_FOREACH_KEY_VAL(exdef_constants_table, num_key, key, val)
	{
		if (key) { //HASH_KEY_IS_STRING
			add_assoc_zval(return_value, ZSTR_VAL(key), val);
		}

	} ZEND_HASH_FOREACH_END();

	//RETURN_ZVAL(exdef_constants_table, 0, 1);
}
/* }}} */
/* The previous line is meant for vim and emacs, so it can correctly fold and
   unfold functions in source code. See the corresponding marks just before
   function definition, where the functions purpose is also documented. Please
   follow this convention for the convenience of others editing your code.
*/


/* {{{ php_exdef_init_globals
 */
static void php_exdef_init_globals(zend_exdef_globals *exdef_globals)
{
	exdef_globals->directory = "";
	exdef_globals->suffix = ".exdef.ini";
}
/* }}} */

/* {{{ php_hidef_shutdown_globals */
static void php_exdef_shutdown_globals(zend_exdef_globals* exdef_globals TSRMLS_DC)
{
	/* nothing ? */
}
/* }}} */


static exdef_parser_ctxt g_ctxt = {0,};




/* {{{ exdef_define_constant */
static int exdef_define_constant(char *k, zval *v, exdef_parser_ctxt* ctxt TSRMLS_DC)
{
	zval value;
	char *key = k;

	/* this is free'd by zend_register_constant, if the addition fails */
	ZVAL_COPY_VALUE(&value, v);
	zval_copy_ctor(&value);

	switch(ctxt->type)
	{
		case IS_LONG:
		{
			convert_to_long(&value);
			zend_register_long_constant(key, sizeof(key)-1, Z_LVAL_P(&value), CONST_PERSISTENT, ctxt->module_number);
		}
			break;
		case IS_DOUBLE:
		{
			convert_to_double(&value);
			zend_register_double_constant(key, sizeof(key)-1, Z_DVAL_P(&value), CONST_PERSISTENT, ctxt->module_number);
		}
			break;
		case IS_TRUE:
		case IS_FALSE:
		{
			convert_to_boolean(&value);
			zend_register_bool_constant(key, sizeof(key)-1, Z_LVAL_P(&value), CONST_PERSISTENT, ctxt->module_number);
		}
			break;
		case IS_STRING:
		{
			convert_to_string(&value);
			zend_register_string_constant(key, sizeof(key)-1, Z_STRVAL_P(&value), CONST_PERSISTENT, ctxt->module_number);
		}
			break;
	}

	zend_string *zv = zend_string_init(key, strlen(key), 0);

	zend_hash_add(exdef_constants_table, zv, &value);
	zval_dtor(&value);


	return 1;
}
/* }}} */




/* {{{ exdef_ini_parser_cb */
static void exdef_ini_parser_cb(zval *arg1, zval *arg2, zval *arg3, int callback_type, void *arg TSRMLS_DC)
{
	char *key;
	exdef_parser_ctxt * ctxt = (exdef_parser_ctxt*)arg;

	if(!arg1) return;

	key = Z_STRVAL_P(arg1);

	switch (callback_type)
	{
		case ZEND_INI_PARSER_ENTRY:
		{
			if(ctxt->type == IS_NULL && !arg2)
			{
				/* callback #1 */
				if(strncmp(key, "int", strlen("int")) == 0)
				{
					ctxt->type = IS_LONG;
				}
				else if(strncmp(key, "str", strlen("str")) == 0)
				{
					ctxt->type = IS_STRING;
				}
				else if(strncmp(key, "float", strlen("float")) == 0)
				{
					ctxt->type = IS_DOUBLE;
				}
				else if(strncmp(key, "true", strlen("true")) == 0)
				{
					ctxt->type = IS_TRUE;
				}
				else if(strncmp(key, "false", strlen("false")) == 0)
				{
					ctxt->type = IS_FALSE;
				}
				else
				{
					ctxt->type = IS_NULL;
				}
			}
			else if(ctxt->type != IS_NULL && arg2)
			{
				exdef_define_constant(key, arg2, ctxt TSRMLS_CC);
				ctxt->type = IS_NULL;
			}
		}
			break;

#ifdef ZEND_INI_PARSER_POP_ENTRY
		case ZEND_INI_PARSER_POP_ENTRY:
		{
			/* do nothing here, I suppose */
		}
		break;
#endif

		case ZEND_INI_PARSER_SECTION:
		{
			/* ignore sectioning */
		}
			break;

		default:
			assert(0);
	}
}
/* }}} */




/* {{{ exdef_parse_ini */
static int exdef_parse_ini(const char *ini_file, void* pctxt TSRMLS_DC)
{
	struct stat sb;
	zend_file_handle fh = {0,};
	exdef_parser_ctxt *ctxt = (exdef_parser_ctxt*)pctxt;

	if (VCWD_STAT(ini_file, &sb) == 0 && S_ISREG(sb.st_mode))
	{
		if ((fh.handle.fp = VCWD_FOPEN(ini_file, "r")))
		{
			fh.filename = (char*)ini_file;
			ctxt->filename = ini_file;
			fh.type = ZEND_HANDLE_FP;
			zend_parse_ini_file(&fh, 1, ZEND_INI_SCANNER_NORMAL, exdef_ini_parser_cb, ctxt);
			return 1;
		}
	}

	return 0;
}
/* }}} */



/* {{{ exdef_walk_dir */
static int exdef_walk_dir(const char *path, const char *ext, exdef_walk_dir_cb cb, void *ctxt TSRMLS_DC)
{
	char file[MAXPATHLEN]={0,};
	int ndir, i, k;
	char *p = NULL;
	struct dirent **namelist = NULL;

	if ((ndir = php_scandir(path, &namelist, 0, php_alphasort)) > 0)
	{
		for (i = 0; i < ndir; i++)
		{
			/* check for extension */
			if (!(p = strrchr(namelist[i]->d_name, '.'))
				|| (p && strcmp(p, ext)))
			{
				free(namelist[i]);
				continue;
			}
			snprintf(file, MAXPATHLEN, "%s%c%s",
					 path, DEFAULT_SLASH, namelist[i]->d_name);
			if(!cb(file, ctxt TSRMLS_CC))
			{
				goto cleanup;
			}
			free(namelist[i]);
		}
		free(namelist);
	}

	return 1;

	cleanup:
	for(k = i; k < ndir; k++)
	{
		free(namelist[k]);
	}
	free(namelist);

	return 0;
}
/* }}} */



/* {{{ exdef_read_ini */
static int exdef_read_ini(exdef_parser_ctxt *ctxt TSRMLS_DC)
{
	const char *directory = NULL;

	if(EXDEF_G(directory))
	{
		directory = EXDEF_G(directory);
	}
	else if(sizeof(PHP_CONFIG_FILE_SCAN_DIR) > 1)
	{
		directory = (const char *)default_directory;
	}
	else
	{
		return 0;
	}

	return exdef_walk_dir(directory, ".exdef.ini", exdef_parse_ini, ctxt TSRMLS_CC);
}
/* }}} */






/* {{{ PHP_MINIT_FUNCTION
 */
PHP_MINIT_FUNCTION(exdef)
{
	ZEND_INIT_MODULE_GLOBALS(exdef, php_exdef_init_globals, php_exdef_shutdown_globals);

	REGISTER_INI_ENTRIES();

	g_ctxt.flags = CONST_CS | CONST_PERSISTENT;
#ifdef CONST_CT_SUBST
	g_ctxt.flags |= CONST_CT_SUBST;
#endif

	g_ctxt.module_number = module_number;

	exdef_constants_table = pemalloc(sizeof(HashTable),1);

	zend_hash_init(exdef_constants_table, 32,  NULL, NULL, 1);

#ifdef ZTS
	EXDEF_G(p_tid) = tsrm_thread_id();
#else
	EXDEF_G(p_pid) = getpid();
#endif

#ifdef HAVE_MALLOC_TRIM
	malloc_trim(0); /* cleanup pages */
#endif


	exdef_parser_ctxt ctxt = {0,};
	ctxt.flags = CONST_CS;
	ctxt.module_number = PHP_USER_CONSTANT;
	//exdef_read_ini(&g_ctxt TSRMLS_CC);

	exdef_parse_ini("/Projects/public-config/constant.exdef.ini", &g_ctxt TSRMLS_CC);


	return SUCCESS;
}
/* }}} */

/* {{{ PHP_MSHUTDOWN_FUNCTION
 */
PHP_MSHUTDOWN_FUNCTION(exdef)
{
#ifdef ZTS
	THREAD_T tid = tsrm_thread_id();
	THREAD_T p_tid = EXDEF_G(p_tid);
	#define IS_ALLOC_THREAD() (memcmp(&(p_tid), &tid, sizeof(THREAD_T))==0)
#else
	pid_t pid = getpid();
	pid_t p_pid = EXDEF_G(p_pid);
#define IS_ALLOC_THREAD() (p_pid == pid)
#endif

	if(IS_ALLOC_THREAD())
	{
		/** Prevent multiple-free() calls of the same data.
		 * If free() is called on data items in each process, the
		 * addition of that item to the libc internal free list,
		 * results in new Copy-on-Write pages being spawned,
		 * increasing the memory-use. So it's counter-productive
		 * to cleanup in child processes.
		 */
		zend_hash_destroy(exdef_constants_table);

		pefree(exdef_constants_table, 1);
	}

#ifdef ZTS
	ts_free_id(exdef_globals_id);
#else
	php_exdef_shutdown_globals(&exdef_globals);
#endif

	UNREGISTER_INI_ENTRIES();
	return SUCCESS;
}
/* }}} */

/* Remove if there's nothing to do at request start */
/* {{{ PHP_RINIT_FUNCTION
 */
PHP_RINIT_FUNCTION(exdef)
{
#if defined(COMPILE_DL_EXDEF) && defined(ZTS)
	ZEND_TSRMLS_CACHE_UPDATE();
#endif
	return SUCCESS;
}
/* }}} */

/* Remove if there's nothing to do at request end */
/* {{{ PHP_RSHUTDOWN_FUNCTION
 */
PHP_RSHUTDOWN_FUNCTION(exdef)
{
	return SUCCESS;
}
/* }}} */

/* {{{ PHP_MINFO_FUNCTION
 */
PHP_MINFO_FUNCTION(exdef)
{
	php_info_print_table_start();
	php_info_print_table_header(2, "exdef support", "enabled");
	php_info_print_table_end();

	/* Remove comments if you have entries in php.ini
	DISPLAY_INI_ENTRIES();
	*/
}
/* }}} */

/* {{{ exdef_functions[]
 *
 * Every user visible function must have an entry in exdef_functions[].
 */
const zend_function_entry exdef_functions[] = {
		PHP_FE(exdef_get_defined,	NULL)		/* For testing, remove later. */
		PHP_FE_END	/* Must be the last line in exdef_functions[] */
};
/* }}} */

/* {{{ exdef_module_entry
 */
zend_module_entry exdef_module_entry = {
		STANDARD_MODULE_HEADER,
		"exdef",
		exdef_functions,
		PHP_MINIT(exdef),
		NULL, //PHP_MSHUTDOWN(exdef),
		NULL, //PHP_RINIT(exdef),		/* Replace with NULL if there's nothing to do at request start */
		NULL, //PHP_RSHUTDOWN(exdef),	/* Replace with NULL if there's nothing to do at request end */
		NULL, //PHP_MINFO(exdef),
		PHP_EXDEF_VERSION,
		STANDARD_MODULE_PROPERTIES
};
/* }}} */

#ifdef COMPILE_DL_EXDEF
#ifdef ZTS
ZEND_TSRMLS_CACHE_DEFINE();
#endif
ZEND_GET_MODULE(exdef)
#endif




/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * End:
 * vim600: noet sw=4 ts=4 fdm=marker
 * vim<600: noet sw=4 ts=4
 */
